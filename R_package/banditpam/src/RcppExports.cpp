// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bpam_num_threads
int bpam_num_threads();
RcppExport SEXP _banditpam_bpam_num_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(bpam_num_threads());
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__new
SEXP KMedoids__new(IntegerVector k, CharacterVector alg, IntegerVector max_iter, IntegerVector build_confidence, IntegerVector swap_confidence);
RcppExport SEXP _banditpam_KMedoids__new(SEXP kSEXP, SEXP algSEXP, SEXP max_iterSEXP, SEXP build_confidenceSEXP, SEXP swap_confidenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type alg(algSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type build_confidence(build_confidenceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type swap_confidence(swap_confidenceSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__new(k, alg, max_iter, build_confidence, swap_confidence));
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__fit
void KMedoids__fit(SEXP xp, arma::mat data, std::vector< std::string > loss, SEXP distMat);
RcppExport SEXP _banditpam_KMedoids__fit(SEXP xpSEXP, SEXP dataSEXP, SEXP lossSEXP, SEXP distMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type loss(lossSEXP);
    Rcpp::traits::input_parameter< SEXP >::type distMat(distMatSEXP);
    KMedoids__fit(xp, data, loss, distMat);
    return R_NilValue;
END_RCPP
}
// KMedoids__get_medoids_final
SEXP KMedoids__get_medoids_final(SEXP xp);
RcppExport SEXP _banditpam_KMedoids__get_medoids_final(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__get_medoids_final(xp));
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__get_k
SEXP KMedoids__get_k(SEXP xp);
RcppExport SEXP _banditpam_KMedoids__get_k(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__get_k(xp));
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__set_k
void KMedoids__set_k(SEXP xp, IntegerVector k);
RcppExport SEXP _banditpam_KMedoids__set_k(SEXP xpSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type k(kSEXP);
    KMedoids__set_k(xp, k);
    return R_NilValue;
END_RCPP
}
// KMedoids__get_max_iter
SEXP KMedoids__get_max_iter(SEXP xp);
RcppExport SEXP _banditpam_KMedoids__get_max_iter(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__get_max_iter(xp));
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__set_max_iter
void KMedoids__set_max_iter(SEXP xp, IntegerVector m);
RcppExport SEXP _banditpam_KMedoids__set_max_iter(SEXP xpSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type m(mSEXP);
    KMedoids__set_max_iter(xp, m);
    return R_NilValue;
END_RCPP
}
// KMedoids__get_build_conf
SEXP KMedoids__get_build_conf(SEXP xp);
RcppExport SEXP _banditpam_KMedoids__get_build_conf(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__get_build_conf(xp));
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__set_build_conf
void KMedoids__set_build_conf(SEXP xp, IntegerVector bc);
RcppExport SEXP _banditpam_KMedoids__set_build_conf(SEXP xpSEXP, SEXP bcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bc(bcSEXP);
    KMedoids__set_build_conf(xp, bc);
    return R_NilValue;
END_RCPP
}
// KMedoids__get_swap_conf
SEXP KMedoids__get_swap_conf(SEXP xp);
RcppExport SEXP _banditpam_KMedoids__get_swap_conf(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__get_swap_conf(xp));
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__set_swap_conf
void KMedoids__set_swap_conf(SEXP xp, IntegerVector bc);
RcppExport SEXP _banditpam_KMedoids__set_swap_conf(SEXP xpSEXP, SEXP bcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bc(bcSEXP);
    KMedoids__set_swap_conf(xp, bc);
    return R_NilValue;
END_RCPP
}
// KMedoids__get_loss_fn
SEXP KMedoids__get_loss_fn(SEXP xp);
RcppExport SEXP _banditpam_KMedoids__get_loss_fn(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__get_loss_fn(xp));
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__set_loss_fn
void KMedoids__set_loss_fn(SEXP xp, std::vector< std::string > loss_fn);
RcppExport SEXP _banditpam_KMedoids__set_loss_fn(SEXP xpSEXP, SEXP loss_fnSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type loss_fn(loss_fnSEXP);
    KMedoids__set_loss_fn(xp, loss_fn);
    return R_NilValue;
END_RCPP
}
// KMedoids__get_statistic
SEXP KMedoids__get_statistic(SEXP xp, IntegerVector what);
RcppExport SEXP _banditpam_KMedoids__get_statistic(SEXP xpSEXP, SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__get_statistic(xp, what));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_banditpam_bpam_num_threads", (DL_FUNC) &_banditpam_bpam_num_threads, 0},
    {"_banditpam_KMedoids__new", (DL_FUNC) &_banditpam_KMedoids__new, 5},
    {"_banditpam_KMedoids__fit", (DL_FUNC) &_banditpam_KMedoids__fit, 4},
    {"_banditpam_KMedoids__get_medoids_final", (DL_FUNC) &_banditpam_KMedoids__get_medoids_final, 1},
    {"_banditpam_KMedoids__get_k", (DL_FUNC) &_banditpam_KMedoids__get_k, 1},
    {"_banditpam_KMedoids__set_k", (DL_FUNC) &_banditpam_KMedoids__set_k, 2},
    {"_banditpam_KMedoids__get_max_iter", (DL_FUNC) &_banditpam_KMedoids__get_max_iter, 1},
    {"_banditpam_KMedoids__set_max_iter", (DL_FUNC) &_banditpam_KMedoids__set_max_iter, 2},
    {"_banditpam_KMedoids__get_build_conf", (DL_FUNC) &_banditpam_KMedoids__get_build_conf, 1},
    {"_banditpam_KMedoids__set_build_conf", (DL_FUNC) &_banditpam_KMedoids__set_build_conf, 2},
    {"_banditpam_KMedoids__get_swap_conf", (DL_FUNC) &_banditpam_KMedoids__get_swap_conf, 1},
    {"_banditpam_KMedoids__set_swap_conf", (DL_FUNC) &_banditpam_KMedoids__set_swap_conf, 2},
    {"_banditpam_KMedoids__get_loss_fn", (DL_FUNC) &_banditpam_KMedoids__get_loss_fn, 1},
    {"_banditpam_KMedoids__set_loss_fn", (DL_FUNC) &_banditpam_KMedoids__set_loss_fn, 2},
    {"_banditpam_KMedoids__get_statistic", (DL_FUNC) &_banditpam_KMedoids__get_statistic, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_banditpam(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
