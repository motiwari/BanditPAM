[{"path":"/articles/kmediods.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Almost Linear-Time k-Medoids Clustering","text":"banditpam R package lets \\(k\\)-mediods clustering efficiently described Tiwari, et. al. (2020). illustrate simple example using simulated data Gaussian Mixture Model following means: \\((0, 0)\\), \\((-5, 5)\\) \\((5, 5)\\). Let’s cluster observations X matrix using 3 clusters. first step create KMedoids object: Next fit data specified loss, \\(l_2\\) . good habit set seed fitting reproducibility. can now extract medoid observation indices. plot shows results color medoids red. Clustering 3-mediods L2 loss can also change loss function see mediods change. Clustering 3-mediods L1 loss One can query performance statistics ; see help KMedoids.","code":"set.seed(10) n_per_cluster <- 40 means <- list(c(0, 0), c(-5, 5), c(5, 5)) X <- do.call(rbind, lapply(means, MASS::mvrnorm, n = n_per_cluster, Sigma = diag(2))) obj <- KMedoids$new(k = 3) set.seed(198) obj$fit(data = X, loss = \"l2\") med_indices <- obj$get_medoids_final() d <- as.data.frame(X); names(d) <- c(\"x\", \"y\") dd <- d[med_indices, ] ggplot(data = d) +   geom_point(aes(x, y)) +   geom_point(aes(x, y), data = dd, color = \"red\") obj$fit(data = X, loss = \"l1\")  # L1 loss med_indices <- obj$get_medoids_final() obj$get_statistic(\"dist_computations\") # no of dist computations #> [1] 30948 obj$get_statistic(\"cache_misses\") #  no of cache misses #> [1] 0"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Balasubramanian Narasimhan. Author, maintainer. Mo Tiwari. Author.            https://motiwari.com","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Narasimhan B, Tiwari M (2023). banditpam: Almost Linear-Time k-Medoids Clustering. R package version 1.0-1.","code":"@Manual{,   title = {banditpam: Almost Linear-Time k-Medoids Clustering},   author = {Balasubramanian Narasimhan and Mo Tiwari},   year = {2023},   note = {R package version 1.0-1}, }"},{"path":"/index.html","id":"banditpam-","dir":"","previous_headings":"","what":"Almost Linear-Time k-Medoids Clustering","title":"Almost Linear-Time k-Medoids Clustering","text":"provide R interface high-performance implementation banditpam, k-medoids clustering algorithm. use software, please cite: Mo Tiwari, Martin Jinye Zhang, James Mayclin, Sebastian Thrun, Chris Piech, Ilan Shomorony. “banditpam: Almost Linear Time k-medoids Clustering via Multi-Armed Bandits” Advances Neural Information Processing Systems (NeurIPS) 2020. ’s BibTeX entry:","code":"@inproceedings{banditpam,   title={banditpam: Almost Linear Time k-medoids Clustering via Multi-Armed Bandits},   author={Tiwari, Mo and Zhang, Martin J and Mayclin, James and Thrun, Sebastian and Piech, Chris and Shomorony, Ilan},   booktitle={Advances in Neural Information Processing Systems},   pages={368--374},   year={2020} }"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Almost Linear-Time k-Medoids Clustering","text":"banditpam can installed CRAN like package.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Almost Linear-Time k-Medoids Clustering","text":"basic example shows solve common problem:","code":"library(banditpam) ## Generate data from a Gaussian Mixture Model with the given means: set.seed(10) n_per_cluster <- 40 means <- list(c(0, 0), c(-5, 5), c(5, 5)) X <- do.call(rbind, lapply(means, MASS::mvrnorm, n = n_per_cluster, Sigma = diag(2))) ## Create KMediods object obj <- KMedoids$new(k = 3) ## Fit data obj$fit(data = X, loss = \"l2\") ## Retrieve medoid indices meds <- obj$get_medoids_final() ## Plot the results plot(X[, 1], X[, 2]) points(X[meds, 1], X[meds, 2], col = \"red\", pch = 19) ## ## One can query some statistics too; see help(\"KMedoids\") ## obj$get_statistic(\"dist_computations\") obj$get_statistic(\"dist_computations_and_misc\") obj$get_statistic(\"cache_misses\")"},{"path":"/reference/BanditPAM-package.html","id":null,"dir":"Reference","previous_headings":"","what":"banditpam is a package for fast clustering using medoids — banditpam-package","title":"banditpam is a package for fast clustering using medoids — banditpam-package","text":"banditpam high-performance package almost linear-time k-medoids clustering. methods described Tiwari, et al. 2020 (Advances Neural Information Processing Systems 33).","code":""},{"path":"/reference/BanditPAM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"banditpam is a package for fast clustering using medoids — banditpam-package","text":"Balasubramanian Narasimhan Mo Tiwari","code":""},{"path":"/reference/KMedoids.html","id":null,"dir":"Reference","previous_headings":"","what":"KMedoids Class — KMedoids","title":"KMedoids Class — KMedoids","text":"class wraps around C++ KMedoids class exposes methods fields C++ object.","code":""},{"path":"/reference/KMedoids.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"KMedoids Class — KMedoids","text":"k (integer(1)) number medoids/clusters create max_iter (integer(1)) max_iter maximum number SWAP steps algorithm runs build_conf (integer(1)) Parameter affects width BUILD confidence intervals, default 1000 swap_conf (integer(1)) Parameter affects width SWAP confidence intervals, default 10000 loss_fn (character(1)) loss function, \"lp\" (p integer > 0) one \"manhattan\", \"cosine\", \"inf\" \"euclidean\"","code":""},{"path":[]},{"path":"/reference/KMedoids.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"KMedoids Class — KMedoids","text":"KMedoids$new() KMedoids$get_algorithm() KMedoids$fit() KMedoids$get_medoids_final() KMedoids$get_statistic() KMedoids$print() KMedoids$clone()","code":""},{"path":"/reference/KMedoids.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"KMedoids Class — KMedoids","text":"Create new KMedoids object","code":""},{"path":"/reference/KMedoids.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$new(   k = 5L,   algorithm = c(\"BanditPAM\", \"PAM\", \"FastPAM1\"),   max_iter = 1000L,   build_conf = 1000,   swap_conf = 10000L )"},{"path":"/reference/KMedoids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"k number medoids/clusters create, default 5 algorithm algorithm use, one \"BanditPAM\", \"PAM\", \"FastPAM1\" max_iter maximum number SWAP steps algorithm runs, default 1000 build_conf parameter affects width BUILD confidence intervals, default 1000 swap_conf parameter affects width SWAP confidence intervals, default 10000","code":""},{"path":"/reference/KMedoids.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"KMedoids Class — KMedoids","text":"KMedoids object can used fit banditpam algorithm data","code":""},{"path":"/reference/KMedoids.html","id":"method-get-algorithm-","dir":"Reference","previous_headings":"","what":"Method get_algorithm()","title":"KMedoids Class — KMedoids","text":"Return algorithm used","code":""},{"path":"/reference/KMedoids.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$get_algorithm()"},{"path":"/reference/KMedoids.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"KMedoids Class — KMedoids","text":"string indicating algorithm","code":""},{"path":"/reference/KMedoids.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"KMedoids Class — KMedoids","text":"Fit KMedoids algorthm given data loss. advisable set seed calling method reproducible results.","code":""},{"path":"/reference/KMedoids.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$fit(data, loss, dist_mat = NULL)"},{"path":"/reference/KMedoids.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"data data matrix loss loss function, either \"lp\" (p, integer indicating L_p loss) one \"manhattan\", \"cosine\", \"inf\" \"euclidean\" dist_mat optional distance matrix","code":""},{"path":"/reference/KMedoids.html","id":"method-get-medoids-final-","dir":"Reference","previous_headings":"","what":"Method get_medoids_final()","title":"KMedoids Class — KMedoids","text":"Return final medoid indices clustering","code":""},{"path":"/reference/KMedoids.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$get_medoids_final()"},{"path":"/reference/KMedoids.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"KMedoids Class — KMedoids","text":"vector indices final mediods","code":""},{"path":"/reference/KMedoids.html","id":"method-get-statistic-","dir":"Reference","previous_headings":"","what":"Method get_statistic()","title":"KMedoids Class — KMedoids","text":"Get specified statistic clustering","code":""},{"path":"/reference/KMedoids.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$get_statistic(what)"},{"path":"/reference/KMedoids.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"string one \"dist_computations\", \"dist_computations_and_misc\", \"misc_dist\", \"build_dist\", \"swap_dist\", \"cache_writes\", \"cache_hits\", \"cache_misses\" return statistic","code":""},{"path":"/reference/KMedoids.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"KMedoids Class — KMedoids","text":"Printer.","code":""},{"path":"/reference/KMedoids.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$print(...)"},{"path":"/reference/KMedoids.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"... (ignored).","code":""},{"path":"/reference/KMedoids.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"KMedoids Class — KMedoids","text":"objects class cloneable method.","code":""},{"path":"/reference/KMedoids.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$clone(deep = FALSE)"},{"path":"/reference/KMedoids.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"deep Whether make deep clone.","code":""},{"path":"/reference/KMedoids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KMedoids Class — KMedoids","text":"","code":"# Generate data from a Gaussian Mixture Model with the given means: set.seed(10) n_per_cluster <- 40 means <- list(c(0, 0), c(-5, 5), c(5, 5)) X <- do.call(rbind, lapply(means, MASS::mvrnorm, n = n_per_cluster, Sigma = diag(2))) obj <- KMedoids$new(k = 3) obj$fit(data = X, loss = \"l2\") meds <- obj$get_medoids_final() plot(X[, 1], X[, 2]) points(X[meds, 1], X[meds, 2], col = \"red\", pch = 19)"},{"path":"/reference/bpam_num_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the number of threads banditpam is using — bpam_num_threads","title":"Return the number of threads banditpam is using — bpam_num_threads","text":"Return number threads banditpam using","code":""},{"path":"/reference/bpam_num_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the number of threads banditpam is using — bpam_num_threads","text":"","code":"bpam_num_threads()"},{"path":"/reference/bpam_num_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the number of threads banditpam is using — bpam_num_threads","text":"number threads banditpam using","code":""},{"path":"/news/index.html","id":"banditpam-10-1","dir":"Changelog","previous_headings":"","what":"banditpam 1.0-1","title":"banditpam 1.0-1","text":"Typographical fixes","code":""},{"path":"/news/index.html","id":"banditpam-10","dir":"Changelog","previous_headings":"","what":"banditpam 1.0","title":"banditpam 1.0","text":"CRAN release: 2023-03-14 First release Added NEWS.md file track changes package","code":""}]
