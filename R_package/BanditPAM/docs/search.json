[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Balasubramanian Narasimhan Mo Tiwari Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/kmediods.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Almost Linear-Time k-Medoids Clustering","text":"BanditPAM R package lets \\(k\\)-mediods clustering efficiently described Tiwari, et. al. (2020). illustrate simple example using simulated data Gaussian Mixture Model following means: \\((0, 0)\\), \\((-5, 5)\\) \\((5, 5)\\). Let’s cluster observations X matrix using 3 clusters. first step create KMedoids object: Next fit data specified loss, \\(l_2\\) . good habit set seed fitting reproducibility. can now extract medoid observation indices. plot shows results color medoids red. Clustering 3-mediods L2 loss can also change loss function see mediods change. Clustering 3-mediods L1 loss","code":"set.seed(10) n_per_cluster <- 40 means <- list(c(0, 0), c(-5, 5), c(5, 5)) X <- do.call(rbind, lapply(means, MASS::mvrnorm, n = n_per_cluster, Sigma = diag(2))) obj <- KMedoids$new(k = 3) set.seed(198) obj$fit(data = X, loss = \"l2\") med_indices <- obj$get_medoids_final() d <- as.data.frame(X); names(d) <- c(\"x\", \"y\") dd <- d[med_indices, ] ggplot(data = d) +   geom_point(aes(x, y)) +   geom_point(aes(x, y), data = dd, color = \"red\") obj$fit(data = X, loss = \"l1\")  # L1 loss med_indices <- obj$get_medoids_final()"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Balasubramanian Narasimhan. Author, maintainer. Mo Tiwari. Author.            https://motiwari.com","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Narasimhan B, Tiwari M (2023). BanditPAM: Almost Linear-Time k-Mediods Clustering. R package version 0.0.0.9001.","code":"@Manual{,   title = {BanditPAM: Almost Linear-Time k-Mediods Clustering},   author = {Balasubramanian Narasimhan and Mo Tiwari},   year = {2023},   note = {R package version 0.0.0.9001}, }"},{"path":"/index.html","id":"banditpam-","dir":"","previous_headings":"","what":"Almost Linear-Time k-Mediods Clustering","title":"Almost Linear-Time k-Mediods Clustering","text":"repo contains high-performance implementation BanditPAM R. use software, please cite: Mo Tiwari, Martin Jinye Zhang, James Mayclin, Sebastian Thrun, Chris Piech, Ilan Shomorony. “BanditPAM: Almost Linear Time k-medoids Clustering via Multi-Armed Bandits” Advances Neural Information Processing Systems (NeurIPS) 2020.","code":"@inproceedings{BanditPAM,   title={BanditPAM: Almost Linear Time k-medoids Clustering via Multi-Armed Bandits},   author={Tiwari, Mo and Zhang, Martin J and Mayclin, James and Thrun, Sebastian and Piech, Chris and Shomorony, Ilan},   booktitle={Advances in Neural Information Processing Systems},   pages={368--374},   year={2020} }"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Almost Linear-Time k-Mediods Clustering","text":"gets CRAN, can install development version BanditPAM like : latter, need package development toolchain R packages. Refer CRAN.","code":"remotes::install_github(\"bnaras/BanditPAM\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Almost Linear-Time k-Mediods Clustering","text":"basic example shows solve common problem:","code":"library(BanditPAM) ## Generate data from a Gaussian Mixture Model with the given means: set.seed(10) n_per_cluster <- 40 means <- list(c(0, 0), c(-5, 5), c(5, 5)) X <- do.call(rbind, lapply(means, MASS::mvrnorm, n = n_per_cluster, Sigma = diag(2))) ## Create KMediods object obj <- KMedoids$new(k = 3) ## Fit data obj$fit(data = X, loss = \"l2\") ## Retrieve medoid indices meds <- obj$get_medoids_final() ## Plot the results plot(X[, 1], X[, 2]) points(X[meds, 1], X[meds, 2], col = \"red\", pch = 19)"},{"path":[]},{"path":"/reference/BanditPAM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BanditPAM is badass — BanditPAM-package","text":"Balasubramanian Narasimhan Mo Tiwari","code":""},{"path":"/reference/KMedoids.html","id":null,"dir":"Reference","previous_headings":"","what":"KMedoids Class — KMedoids","title":"KMedoids Class — KMedoids","text":"class wraps around C++ KMedoids class exposes methods fields C++ object.","code":""},{"path":"/reference/KMedoids.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"KMedoids Class — KMedoids","text":"k (integer(1)) number medoids/clusters create max_iter (integer(1)) max_iter maximum number SWAP steps algorithm runs build_conf (integer(1)) Parameter affects width BUILD confidence intervals, default 1000 swap_conf (integer(1)) Parameter affects width SWAP confidence intervals, default 10000 loss_fn (character(1)) loss function, \"lp\" (p integer > 0) one \"manhattan\", \"cosine\", \"inf\" \"euclidean\"","code":""},{"path":[]},{"path":"/reference/KMedoids.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"KMedoids Class — KMedoids","text":"KMedoids$new() KMedoids$fit() KMedoids$get_medoids_final() KMedoids$print() KMedoids$clone()","code":""},{"path":"/reference/KMedoids.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"KMedoids Class — KMedoids","text":"Create new KMedoids object","code":""},{"path":"/reference/KMedoids.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$new(k = 5L, max_iter = 1000L, build_conf = 1000, swap_conf = 10000L)"},{"path":"/reference/KMedoids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"k number medoids/clusters create, default 5 max_iter maximum number SWAP steps algorithm runs, default 1000 build_conf parameter affects width BUILD confidence intervals, default 1000 swap_conf parameter affects width SWAP confidence intervals, default 10000","code":""},{"path":"/reference/KMedoids.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"KMedoids Class — KMedoids","text":"KMedoids object can used fit BanditPAM algorithm data","code":""},{"path":"/reference/KMedoids.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"KMedoids Class — KMedoids","text":"Fit KMedoids algorthm given data loss. advisable set seed calling method reproducible results.","code":""},{"path":"/reference/KMedoids.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$fit(data, loss)"},{"path":"/reference/KMedoids.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"data data matrix loss loss function, either \"lp\" (p, integer indicating L_p loss) one \"manhattan\", \"cosine\", \"inf\" \"euclidean\"","code":""},{"path":"/reference/KMedoids.html","id":"method-get-medoids-final-","dir":"Reference","previous_headings":"","what":"Method get_medoids_final()","title":"KMedoids Class — KMedoids","text":"Return final medoid indices clustering","code":""},{"path":"/reference/KMedoids.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$get_medoids_final()"},{"path":"/reference/KMedoids.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"return vector indices final mediods","code":""},{"path":"/reference/KMedoids.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"KMedoids Class — KMedoids","text":"Printer.","code":""},{"path":"/reference/KMedoids.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$print(...)"},{"path":"/reference/KMedoids.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"... (ignored).","code":""},{"path":"/reference/KMedoids.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"KMedoids Class — KMedoids","text":"objects class cloneable method.","code":""},{"path":"/reference/KMedoids.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"KMedoids Class — KMedoids","text":"","code":"KMedoids$clone(deep = FALSE)"},{"path":"/reference/KMedoids.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"KMedoids Class — KMedoids","text":"deep Whether make deep clone.","code":""},{"path":"/reference/KMedoids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KMedoids Class — KMedoids","text":"","code":"# Generate data from a Gaussian Mixture Model with the given means: set.seed(10) n_per_cluster <- 40 means <- list(c(0, 0), c(-5, 5), c(5, 5)) X <- do.call(rbind, lapply(means, MASS::mvrnorm, n = n_per_cluster, Sigma = diag(2))) obj <- KMedoids$new(k = 3) obj$fit(data = X, loss = \"l2\") meds <- obj$get_medoids_final() plot(X[, 1], X[, 2]) points(X[meds, 1], X[meds, 2], col = \"red\", pch = 19)"},{"path":"/reference/dot-KMedoids__fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the KMedoids algorthm given the data and loss — .KMedoids__fit","title":"Fit the KMedoids algorthm given the data and loss — .KMedoids__fit","text":"Fit KMedoids algorthm given data loss","code":""},{"path":"/reference/dot-KMedoids__fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the KMedoids algorthm given the data and loss — .KMedoids__fit","text":"","code":".KMedoids__fit(xp, data, loss)"},{"path":"/reference/dot-KMedoids__fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the KMedoids algorthm given the data and loss — .KMedoids__fit","text":"xp km::KMedoids Object XPtr data data matrix loss loss indicator","code":""},{"path":"/reference/dot-KMedoids__get_build_conf.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the build_conf property — .KMedoids__get_build_conf","title":"Return the build_conf property — .KMedoids__get_build_conf","text":"Return build_conf property","code":""},{"path":"/reference/dot-KMedoids__get_build_conf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the build_conf property — .KMedoids__get_build_conf","text":"","code":".KMedoids__get_build_conf(xp)"},{"path":"/reference/dot-KMedoids__get_build_conf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the build_conf property — .KMedoids__get_build_conf","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/reference/dot-KMedoids__get_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the number of medoids property k — .KMedoids__get_k","title":"Return the number of medoids property k — .KMedoids__get_k","text":"Return number medoids property k","code":""},{"path":"/reference/dot-KMedoids__get_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the number of medoids property k — .KMedoids__get_k","text":"","code":".KMedoids__get_k(xp)"},{"path":"/reference/dot-KMedoids__get_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the number of medoids property k — .KMedoids__get_k","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/reference/dot-KMedoids__get_loss_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the loss_fn property — .KMedoids__get_loss_fn","title":"Return the loss_fn property — .KMedoids__get_loss_fn","text":"Return loss_fn property","code":""},{"path":"/reference/dot-KMedoids__get_loss_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the loss_fn property — .KMedoids__get_loss_fn","text":"","code":".KMedoids__get_loss_fn(xp)"},{"path":"/reference/dot-KMedoids__get_loss_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the loss_fn property — .KMedoids__get_loss_fn","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/reference/dot-KMedoids__get_max_iter.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the max_iter property — .KMedoids__get_max_iter","title":"Return the max_iter property — .KMedoids__get_max_iter","text":"Return max_iter property","code":""},{"path":"/reference/dot-KMedoids__get_max_iter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the max_iter property — .KMedoids__get_max_iter","text":"","code":".KMedoids__get_max_iter(xp)"},{"path":"/reference/dot-KMedoids__get_max_iter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the max_iter property — .KMedoids__get_max_iter","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/reference/dot-KMedoids__get_medoids_final.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the final medoids — .KMedoids__get_medoids_final","title":"Return the final medoids — .KMedoids__get_medoids_final","text":"Return final medoids","code":""},{"path":"/reference/dot-KMedoids__get_medoids_final.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the final medoids — .KMedoids__get_medoids_final","text":"","code":".KMedoids__get_medoids_final(xp)"},{"path":"/reference/dot-KMedoids__get_medoids_final.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the final medoids — .KMedoids__get_medoids_final","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/reference/dot-KMedoids__get_swap_conf.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the swap_conf property — .KMedoids__get_swap_conf","title":"Return the swap_conf property — .KMedoids__get_swap_conf","text":"Return swap_conf property","code":""},{"path":"/reference/dot-KMedoids__get_swap_conf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the swap_conf property — .KMedoids__get_swap_conf","text":"","code":".KMedoids__get_swap_conf(xp)"},{"path":"/reference/dot-KMedoids__get_swap_conf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the swap_conf property — .KMedoids__get_swap_conf","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/reference/dot-KMedoids__new.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new KMedoids object. — .KMedoids__new","title":"Create a new KMedoids object. — .KMedoids__new","text":"Create new KMedoids object.","code":""},{"path":"/reference/dot-KMedoids__new.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new KMedoids object. — .KMedoids__new","text":"","code":".KMedoids__new(k, max_iter, build_confidence, swap_confidence)"},{"path":"/reference/dot-KMedoids__new.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new KMedoids object. — .KMedoids__new","text":"external ptr (Rcpp::XPtr) KMedoids object instance.","code":""},{"path":"/reference/dot-KMedoids__set_iter.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the max_iter property — .KMedoids__set_iter","title":"Set the max_iter property — .KMedoids__set_iter","text":"Set max_iter property Set build_conf property Set swap_conf property","code":""},{"path":"/reference/dot-KMedoids__set_iter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the max_iter property — .KMedoids__set_iter","text":"","code":".KMedoids__set_iter(xp, bc)  .KMedoids__set_iter(xp, bc)  .KMedoids__set_iter(xp, bc)"},{"path":"/reference/dot-KMedoids__set_iter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the max_iter property — .KMedoids__set_iter","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/reference/dot-KMedoids__set_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the number of medoids property k — .KMedoids__set_k","title":"Set the number of medoids property k — .KMedoids__set_k","text":"Set number medoids property k","code":""},{"path":"/reference/dot-KMedoids__set_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the number of medoids property k — .KMedoids__set_k","text":"","code":".KMedoids__set_k(xp, k)"},{"path":"/reference/dot-KMedoids__set_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the number of medoids property k — .KMedoids__set_k","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/reference/dot-KMedoids__set_loss_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the loss_fn property — .KMedoids__set_loss_fn","title":"Set the loss_fn property — .KMedoids__set_loss_fn","text":"Set loss_fn property","code":""},{"path":"/reference/dot-KMedoids__set_loss_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the loss_fn property — .KMedoids__set_loss_fn","text":"","code":".KMedoids__set_loss_fn(xp, loss_fn)"},{"path":"/reference/dot-KMedoids__set_loss_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the loss_fn property — .KMedoids__set_loss_fn","text":"xp km::KMedoids Object XPtr","code":""},{"path":"/news/index.html","id":"banditpam-0009000","dir":"Changelog","previous_headings":"","what":"BanditPAM 0.0.0.9000","title":"BanditPAM 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
